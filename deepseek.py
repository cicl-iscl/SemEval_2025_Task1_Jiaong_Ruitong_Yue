# -*- coding: utf-8 -*-
"""deepseek.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16X3U5p0wSHV7E9n9y_tBuMWu_IBSdrrB
"""

!pip install openai==0.28

!pip install openai pandas

from google.colab import drive
drive.mount('/content/gdrive')

import openai
import pandas as pd

# 配置 API 密钥
openai.api_key = 'sk-dddfebca99f24567ba0742500e1f3fc0'
openai.api_base = 'https://api.deepseek.com/v1'

# 读取 TSV 文件
input_file = '/content/gdrive/MyDrive/Subtask_A_Train/Subtask A train /subtask_a_train.tsv'  # 替换为您的 TSV 文件路径
data = pd.read_csv(input_file, sep='\t')

# 检查是否包含必要的列
if 'compound' not in data.columns or 'sentence' not in data.columns:
    raise ValueError("TSV 文件必须包含 'compound' 和 'sentence' 列。")

def classify_sentence_type(compound, sentence):
    prompt = f"""
    You are an idiom expert. Your task is to analyze the given compound word and sentence. Determine whether the compound word is used idiomatically or literally in the given context. Respond with either "idiomatic" or "literal" based on your analysis.

    Compound: {compound}
    Sentence: {sentence}

    Output:
    """
    try:
        response = openai.ChatCompletion.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "You are an idiom analysis expert."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error: {e}"

# 遍历每一行并打印结果
for _, row in data.iterrows():
    compound = row['compound']
    sentence = row['sentence']
    sentence_type = classify_sentence_type(compound, sentence)
    print(f"Compound：{compound}, Sentence Type：{sentence_type}")

def classify_sentence_type(compound, tag):
    prompt = f"""
    You are an idiom expert. Your task is to give the idiomatic or literal meaning of the compound words, according to the given tag ('idiomatic' or 'literal').
    The meanings should not exceed 30 words.

    Compound: {compound}
    Tag: {tag}

    Output:
    - Meaning: [brief explanation of the compound word, maximum 30 words]
    """
    try:
        response = openai.ChatCompletion.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "You are an idiom analysis expert."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Error: {e}"

# 遍历每一行并打印结果
for _, row in data.iterrows():
    compound = row['compound']
    sentence_type = row['sentence_type']  # 假设 TSV 文件中有 'sentence_type' 列
    meaning = classify_sentence_type(compound, sentence_type)
    print(f"Compound: {compound}, Sentence Type: {sentence_type}, Meaning: {meaning}")

