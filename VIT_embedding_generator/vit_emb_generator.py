# -*- coding: utf-8 -*-
"""vitEmbdeingGenerator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CloWrHAaGhoLnZrgRQUaCu_KABMaarKy
"""

from google.colab import drive
drive.mount('/content/gdrive')

!unzip "/content/gdrive/MyDrive/Subtask A train .zip" -d "/content/gdrive/MyDrive/Subtask_A_Train/"

!pip install transformers

from transformers import ViTModel, ViTImageProcessor
from PIL import Image
import torch
import pandas as pd
import os

# load VIT
model_name = "openai/clip-vit-large-patch14"
model = ViTModel.from_pretrained(model_name)
processor = ViTImageProcessor.from_pretrained(model_name)
model.eval()

import pandas as pd

# read TSV file
tsv_file_path = "/content/drive/MyDrive/cleaned_subtask_a_train_idiomatic.tsv"
data = pd.read_csv(tsv_file_path, sep="\t", encoding="latin-1")

# print columns and sample in dataframe
print("Columns in the DataFrame:")
print(data.columns)
print("\nSample rows in the DataFrame:")
print(data.head())

# define image path
train_folder_path = "/content/drive/MyDrive/Subtask_A_Train/Subtask A train /idimatic"
image_folder_path = train_folder_path

# check if it exists
if os.path.exists(image_folder_path):
    print("Image folder path exists:", image_folder_path)
else:
    print("Image folder path does not exist:", image_folder_path)

# iterate to find all the image file
image_files = []
for root, dirs, files in os.walk(image_folder_path):
    for file in files:
        if file.endswith(('.png', '.jpg', '.jpeg', '.PNG', '.JPG', '.JPEG')):
            image_files.append(os.path.join(root, file))

print(f"Found {len(image_files)} image files.")
print("Sample image files:", image_files[:10])

# iterate the dataset
for index, row in data.iterrows():
    compound = row['compound']
    image_files = [
        row['image1_name'],
        row['image2_name'],
        row['image3_name'],
        row['image4_name'],
        row['image5_name']
    ]

# iterate compound file
for compound_folder in os.listdir(image_folder_path):
    compound_path = os.path.join(image_folder_path, compound_folder)
    if not os.path.isdir(compound_path):
        continue

    print(f"Processing compound: {compound_folder}")
    embeddings = []

    for image_file in os.listdir(compound_path):
        if image_file.endswith(('.png', '.jpg', '.jpeg', '.PNG', '.JPG', '.JPEG')):
            image_path = os.path.join(compound_path, image_file)
            print(f"Processing image: {image_path}")


            if embedding is not None:
                embeddings.append(embedding)
            else:
                print(f"Failed to process image: {image_path}")


    if embeddings:
        compound_embeddings[compound_folder] = torch.stack(embeddings)
    else:
        print(f"No embeddings found for compound {compound_folder}")


print("Finished processing all compounds.")
print(f"Total compounds processed: {len(compound_embeddings)}")

# save compound embedding
torch.save(compound_embeddings, "compound_embeddings_idiomatic.pt")
print("Embeddings saved to 'compound_embeddings_idiomatic.pt'")

# load saved embedding
loaded_embeddings = torch.load("compound_embeddings_idiomatic.pt")
for compound, embeddings in loaded_embeddings.items():
    print(f"{compound}: {embeddings.shape}")